// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace traditional_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 87> locations_array__ =
  {" (found before start of program)",
  " (in 'traditional.stan', line 19, column 2 to column 29)",
  " (in 'traditional.stan', line 20, column 2 to column 27)",
  " (in 'traditional.stan', line 21, column 2 to column 17)",
  " (in 'traditional.stan', line 22, column 2 to column 18)",
  " (in 'traditional.stan', line 26, column 2 to column 36)",
  " (in 'traditional.stan', line 27, column 2 to column 51)",
  " (in 'traditional.stan', line 28, column 2 to column 40)",
  " (in 'traditional.stan', line 29, column 2 to column 53)",
  " (in 'traditional.stan', line 60, column 2 to column 43)",
  " (in 'traditional.stan', line 61, column 2 to column 34)",
  " (in 'traditional.stan', line 32, column 4 to column 20)",
  " (in 'traditional.stan', line 33, column 4 to column 21)",
  " (in 'traditional.stan', line 36, column 6 to column 14)",
  " (in 'traditional.stan', line 37, column 6 to column 66)",
  " (in 'traditional.stan', line 39, column 8 to column 48)",
  " (in 'traditional.stan', line 40, column 8 to column 64)",
  " (in 'traditional.stan', line 38, column 20 to line 41, column 7)",
  " (in 'traditional.stan', line 38, column 6 to line 41, column 7)",
  " (in 'traditional.stan', line 43, column 8 to column 56)",
  " (in 'traditional.stan', line 44, column 8 to column 64)",
  " (in 'traditional.stan', line 42, column 40 to line 45, column 7)",
  " (in 'traditional.stan', line 42, column 6 to line 45, column 7)",
  " (in 'traditional.stan', line 35, column 15 to line 46, column 5)",
  " (in 'traditional.stan', line 35, column 4 to line 46, column 5)",
  " (in 'traditional.stan', line 31, column 15 to line 47, column 3)",
  " (in 'traditional.stan', line 31, column 2 to line 47, column 3)",
  " (in 'traditional.stan', line 64, column 4 to column 12)",
  " (in 'traditional.stan', line 65, column 4 to column 16)",
  " (in 'traditional.stan', line 66, column 4 to column 20)",
  " (in 'traditional.stan', line 67, column 4 to column 21)",
  " (in 'traditional.stan', line 68, column 4 to column 18)",
  " (in 'traditional.stan', line 74, column 8 to column 33)",
  " (in 'traditional.stan', line 72, column 8 to column 27)",
  " (in 'traditional.stan', line 71, column 6 to line 74, column 33)",
  " (in 'traditional.stan', line 70, column 16 to line 75, column 5)",
  " (in 'traditional.stan', line 70, column 4 to line 75, column 5)",
  " (in 'traditional.stan', line 81, column 6 to column 55)",
  " (in 'traditional.stan', line 82, column 6 to column 62)",
  " (in 'traditional.stan', line 80, column 23 to line 83, column 5)",
  " (in 'traditional.stan', line 80, column 9 to line 83, column 5)",
  " (in 'traditional.stan', line 77, column 6 to column 47)",
  " (in 'traditional.stan', line 78, column 6 to column 62)",
  " (in 'traditional.stan', line 76, column 29 to line 79, column 5)",
  " (in 'traditional.stan', line 76, column 4 to line 83, column 5)",
  " (in 'traditional.stan', line 88, column 6 to column 75)",
  " (in 'traditional.stan', line 89, column 6 to column 73)",
  " (in 'traditional.stan', line 87, column 11 to line 90, column 5)",
  " (in 'traditional.stan', line 85, column 6 to column 38)",
  " (in 'traditional.stan', line 86, column 6 to column 30)",
  " (in 'traditional.stan', line 84, column 16 to line 87, column 5)",
  " (in 'traditional.stan', line 84, column 4 to line 90, column 5)",
  " (in 'traditional.stan', line 63, column 27 to line 91, column 3)",
  " (in 'traditional.stan', line 63, column 2 to line 91, column 3)",
  " (in 'traditional.stan', line 51, column 2 to column 28)",
  " (in 'traditional.stan', line 52, column 2 to column 30)",
  " (in 'traditional.stan', line 53, column 2 to column 27)",
  " (in 'traditional.stan', line 54, column 2 to column 23)",
  " (in 'traditional.stan', line 56, column 12 to column 30)",
  " (in 'traditional.stan', line 56, column 2 to column 30)",
  " (in 'traditional.stan', line 4, column 2 to column 17)",
  " (in 'traditional.stan', line 5, column 2 to column 23)",
  " (in 'traditional.stan', line 6, column 2 to column 17)",
  " (in 'traditional.stan', line 7, column 2 to column 17)",
  " (in 'traditional.stan', line 8, column 2 to column 28)",
  " (in 'traditional.stan', line 9, column 2 to column 37)",
  " (in 'traditional.stan', line 10, column 8 to column 19)",
  " (in 'traditional.stan', line 10, column 2 to column 37)",
  " (in 'traditional.stan', line 11, column 8 to column 19)",
  " (in 'traditional.stan', line 11, column 2 to column 37)",
  " (in 'traditional.stan', line 12, column 8 to column 19)",
  " (in 'traditional.stan', line 12, column 2 to column 36)",
  " (in 'traditional.stan', line 13, column 9 to column 20)",
  " (in 'traditional.stan', line 13, column 2 to column 24)",
  " (in 'traditional.stan', line 14, column 2 to column 30)",
  " (in 'traditional.stan', line 15, column 2 to column 25)",
  " (in 'traditional.stan', line 19, column 9 to column 16)",
  " (in 'traditional.stan', line 26, column 9 to column 10)",
  " (in 'traditional.stan', line 27, column 18 to column 25)",
  " (in 'traditional.stan', line 60, column 8 to column 19)",
  " (in 'traditional.stan', line 61, column 8 to column 19)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 3, column 4, included from\n'traditional.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 5, column 8, included from\n'traditional.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 4, column 18, included from\n'traditional.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 4, column 6, included from\n'traditional.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 8, column 4, included from\n'traditional.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan/functions.stan', line 2, column 33, included from\n'traditional.stan', line 1, column 0)"};
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>>* = nullptr>
int isin(const T0__& i, const T1__& x, std::ostream* pstream__);
// int isin(int, array[] int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>>*>
int isin(const T0__& i, const T1__& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 81;
    for (int sym1__ = 1; sym1__ <= stan::math::size(x); ++sym1__) {
      int n;
      current_statement__ = 81;
      n = x[(sym1__ - 1)];
      current_statement__ = 84;
      if (stan::math::logical_eq(n, i)) {
        current_statement__ = 82;
        return 1;
      }
    }
    current_statement__ = 85;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class traditional_model final : public model_base_crtp<traditional_model> {
 private:
  int T;
  int T_prime;
  int N;
  int M;
  int tau;
  std::vector<int> rho;
  std::vector<int> ii;
  std::vector<int> jj;
  std::vector<int> B;
  Eigen::Matrix<double,-1,1> y_data__;
  int learn;
  double MAX_PRED;
  int alpha_star_1dim__;
  int alpha_1dim__;
  int y_tilde_1dim__;
  int log_lik_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
 public:
  ~traditional_model() {}
  traditional_model(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "traditional_model_namespace::traditional_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 60;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 60;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 60;
      stan::math::check_greater_or_equal(function__, "T", T, 0);
      current_statement__ = 61;
      context__.validate_dims("data initialization", "T_prime", "int",
        std::vector<size_t>{});
      T_prime = std::numeric_limits<int>::min();
      current_statement__ = 61;
      T_prime = context__.vals_i("T_prime")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "T_prime", T_prime, 0);
      current_statement__ = 62;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 62;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 63;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 63;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 64;
      context__.validate_dims("data initialization", "tau", "int",
        std::vector<size_t>{});
      tau = std::numeric_limits<int>::min();
      current_statement__ = 64;
      tau = context__.vals_i("tau")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "tau", tau, 2);
      current_statement__ = 64;
      stan::math::check_less_or_equal(function__, "tau", tau, M);
      current_statement__ = 65;
      context__.validate_dims("data initialization", "rho", "int",
        std::vector<size_t>{static_cast<size_t>(2)});
      rho = std::vector<int>(2, std::numeric_limits<int>::min());
      current_statement__ = 65;
      rho = context__.vals_i("rho");
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "rho", rho, 2);
      current_statement__ = 65;
      stan::math::check_less_or_equal(function__, "rho", rho, M);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("ii", "T + T_prime", (T +
        T_prime));
      current_statement__ = 67;
      context__.validate_dims("data initialization", "ii", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      ii = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 67;
      ii = context__.vals_i("ii");
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "ii", ii, 1);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("jj", "T + T_prime", (T +
        T_prime));
      current_statement__ = 69;
      context__.validate_dims("data initialization", "jj", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      jj = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 69;
      jj = context__.vals_i("jj");
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("B", "T + T_prime", (T +
        T_prime));
      current_statement__ = 71;
      context__.validate_dims("data initialization", "B", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      B = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 71;
      B = context__.vals_i("B");
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "B", B, 0);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("y", "T + T_prime", (T +
        T_prime));
      current_statement__ = 73;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant((T + T_prime),
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), (T +
        T_prime));
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 73;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (T + T_prime); ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 74;
      context__.validate_dims("data initialization", "learn", "int",
        std::vector<size_t>{});
      learn = std::numeric_limits<int>::min();
      current_statement__ = 74;
      learn = context__.vals_i("learn")[(1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "learn", learn, 0);
      current_statement__ = 74;
      stan::math::check_less_or_equal(function__, "learn", learn, 1);
      current_statement__ = 75;
      context__.validate_dims("data initialization", "MAX_PRED", "double",
        std::vector<size_t>{});
      MAX_PRED = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 75;
      MAX_PRED = context__.vals_r("MAX_PRED")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "MAX_PRED", MAX_PRED, 0);
      current_statement__ = 76;
      alpha_star_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 76;
      alpha_star_1dim__ = (tau - 1);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("alpha_star", "tau - 1",
        alpha_star_1dim__);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("lp", "T", T);
      current_statement__ = 78;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 78;
      alpha_1dim__ = (tau - 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("alpha", "tau - 1",
        alpha_1dim__);
      current_statement__ = 79;
      y_tilde_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 79;
      y_tilde_1dim__ = (T + T_prime);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("y_tilde", "T + T_prime",
        y_tilde_1dim__);
      current_statement__ = 80;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 80;
      log_lik_1dim__ = (T + T_prime);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("log_lik", "T + T_prime",
        log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = alpha_star_1dim__ + 1 + 1 + 2;
  }
  inline std::string model_name() const final {
    return "traditional_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=traditional.stan --include-paths=/Users/cmgoold/Documents/ledger/hidden-markov-development-2024/code/stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "traditional_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<local_scalar_t__,-1,1> lp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(lp, stan::math::rep_vector(0.0, T),
        "assigning variable lp");
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      local_scalar_t__ omega = DUMMY_VAR__;
      current_statement__ = 7;
      omega = stan::math::exp(omega_star);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 8;
      beta = stan::math::inv_logit(beta_star);
      current_statement__ = 26;
      for (int t = 1; t <= T; ++t) {
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 11;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 12;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 24;
        if (stan::math::logical_gt(lag, 1)) {
          local_scalar_t__ mu = DUMMY_VAR__;
          local_scalar_t__ sigma2 = DUMMY_VAR__;
          current_statement__ = 14;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
          current_statement__ = 18;
          if (stan::math::logical_lte(lag, tau)) {
            current_statement__ = 15;
            mu = (stan::model::rvalue(alpha_star, "alpha_star",
                    stan::model::index_uni((lag - 1)))
              +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 16;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
          current_statement__ = 22;
          if ((stan::math::primitive_value(
                 stan::math::logical_gte(lag,
                   stan::model::rvalue(rho, "rho", stan::model::index_uni(1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_lte(lag,
                  stan::model::rvalue(rho, "rho", stan::model::index_uni(2)))))) {
            current_statement__ = 19;
            mu = ((omega_star * stan::math::pow(beta, lag)) +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 20;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      {
        current_statement__ = 54;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_star, 0, 1));
        current_statement__ = 55;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_star, 0, 0.1));
        current_statement__ = 56;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_star, 0, 1));
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 59;
        if (learn) {
          current_statement__ = 58;
          lp_accum__.add(stan::math::sum(lp));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "traditional_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<local_scalar_t__,-1,1> lp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(T, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(lp, stan::math::rep_vector(0.0, T),
        "assigning variable lp");
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      local_scalar_t__ omega = DUMMY_VAR__;
      current_statement__ = 7;
      omega = stan::math::exp(omega_star);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 8;
      beta = stan::math::inv_logit(beta_star);
      current_statement__ = 26;
      for (int t = 1; t <= T; ++t) {
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 11;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 12;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 24;
        if (stan::math::logical_gt(lag, 1)) {
          local_scalar_t__ mu = DUMMY_VAR__;
          local_scalar_t__ sigma2 = DUMMY_VAR__;
          current_statement__ = 14;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
          current_statement__ = 18;
          if (stan::math::logical_lte(lag, tau)) {
            current_statement__ = 15;
            mu = (stan::model::rvalue(alpha_star, "alpha_star",
                    stan::model::index_uni((lag - 1)))
              +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 16;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
          current_statement__ = 22;
          if ((stan::math::primitive_value(
                 stan::math::logical_gte(lag,
                   stan::model::rvalue(rho, "rho", stan::model::index_uni(1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_lte(lag,
                  stan::model::rvalue(rho, "rho", stan::model::index_uni(2)))))) {
            current_statement__ = 19;
            mu = ((omega_star * stan::math::pow(beta, lag)) +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 20;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      {
        current_statement__ = 54;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_star, 0, 1));
        current_statement__ = 55;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_star, 0, 0.1));
        current_statement__ = 56;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_star, 0, 1));
        current_statement__ = 57;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 59;
        if (learn) {
          current_statement__ = 58;
          lp_accum__.add(stan::math::sum(lp));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "traditional_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha_star =
        Eigen::Matrix<double,-1,1>::Constant(alpha_star_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      double omega_star = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double beta_star = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(2,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(2);
      Eigen::Matrix<double,-1,1> lp =
        Eigen::Matrix<double,-1,1>::Constant(T,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double omega = std::numeric_limits<double>::quiet_NaN();
      double beta = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha_star);
      out__.write(omega_star);
      out__.write(beta_star);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 5;
      stan::model::assign(lp, stan::math::rep_vector(0.0, T),
        "assigning variable lp");
      current_statement__ = 6;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      current_statement__ = 7;
      omega = stan::math::exp(omega_star);
      current_statement__ = 8;
      beta = stan::math::inv_logit(beta_star);
      current_statement__ = 26;
      for (int t = 1; t <= T; ++t) {
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 11;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 12;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 24;
        if (stan::math::logical_gt(lag, 1)) {
          double mu = std::numeric_limits<double>::quiet_NaN();
          double sigma2 = std::numeric_limits<double>::quiet_NaN();
          current_statement__ = 14;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
          current_statement__ = 18;
          if (stan::math::logical_lte(lag, tau)) {
            current_statement__ = 15;
            mu = (stan::model::rvalue(alpha_star, "alpha_star",
                    stan::model::index_uni((lag - 1)))
              +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 16;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
          current_statement__ = 22;
          if ((stan::math::primitive_value(
                 stan::math::logical_gte(lag,
                   stan::model::rvalue(rho, "rho", stan::model::index_uni(1))))
              &&
              stan::math::primitive_value(
                stan::math::logical_lte(lag,
                  stan::model::rvalue(rho, "rho", stan::model::index_uni(2)))))) {
            current_statement__ = 19;
            mu = ((omega_star * stan::math::pow(beta, lag)) +
              stan::math::log(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    stan::model::rvalue(B, "B", stan::model::index_uni(t))))));
            current_statement__ = 20;
            stan::model::assign(lp,
              (stan::model::rvalue(lp, "lp", stan::model::index_uni(t)) +
              stan::math::lognormal_lpdf<false>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1))), mu, stan::math::sqrt(sigma2))),
              "assigning variable lp", stan::model::index_uni(t));
          }
        }
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 8;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      if (emit_transformed_parameters__) {
        out__.write(lp);
        out__.write(alpha);
        out__.write(omega);
        out__.write(beta);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> y_tilde =
        std::vector<double>(y_tilde_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> log_lik =
        std::vector<double>(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 53;
      for (int t = 1; t <= (T + T_prime); ++t) {
        double mu = std::numeric_limits<double>::quiet_NaN();
        double sigma2 = std::numeric_limits<double>::quiet_NaN();
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 29;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 30;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        double lagged_y = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 36;
        if (stan::math::logical_gt(lag, 1)) {
          current_statement__ = 34;
          if (isin(stan::model::rvalue(B, "B", stan::model::index_uni(t)),
                stan::model::rvalue(B, "B", stan::model::index_min_max(1, T)),
                pstream__)) {
            current_statement__ = 33;
            lagged_y = stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t))));
          } else {
            current_statement__ = 32;
            lagged_y = stan::model::rvalue(y_tilde, "y_tilde",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t))));
          }
        }
        current_statement__ = 44;
        if ((stan::math::primitive_value(stan::math::logical_lte(lag, tau))
            && stan::math::primitive_value(stan::math::logical_gt(lag, 1)))) {
          current_statement__ = 41;
          mu = (stan::math::log(lagged_y) +
            stan::model::rvalue(alpha_star, "alpha_star",
              stan::model::index_uni((lag - 1))));
          current_statement__ = 42;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(lagged_y)));
        } else {
          current_statement__ = 40;
          if (stan::math::logical_gt(lag, tau)) {
            current_statement__ = 37;
            mu = (stan::math::log(lagged_y) + (omega_star *
              stan::math::pow(beta, lag)));
            current_statement__ = 38;
            sigma2 = stan::math::exp(
                       ((stan::model::rvalue(gamma, "gamma",
                           stan::model::index_uni(1)) +
                       (stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(2)) * lag)) +
                       stan::math::log(lagged_y)));
          }
        }
        current_statement__ = 51;
        if (stan::math::logical_eq(lag, 1)) {
          current_statement__ = 48;
          stan::model::assign(y_tilde,
            stan::model::rvalue(y, "y",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1))),
            "assigning variable y_tilde",
            stan::model::index_uni(
              (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
          current_statement__ = 49;
          stan::model::assign(log_lik, 0.0, "assigning variable log_lik",
            stan::model::index_uni(
              (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
        } else {
          current_statement__ = 45;
          stan::model::assign(y_tilde,
            stan::math::min(
              (Eigen::Matrix<double,1,-1>(2) << MAX_PRED,
                                               stan::math::lognormal_rng(mu,
                                                 stan::math::sqrt(sigma2),
                                                 base_rng__)).finished()),
            "assigning variable y_tilde",
            stan::model::index_uni(
              (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
          current_statement__ = 46;
          stan::model::assign(log_lik,
            stan::math::lognormal_lpdf<false>(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1))), mu, stan::math::sqrt(sigma2)),
            "assigning variable log_lik",
            stan::model::index_uni(
              (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "y_tilde", y_tilde, 0);
      out__.write(y_tilde);
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_star,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__),
        "assigning variable alpha_star");
      out__.write(alpha_star);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_star);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.read<local_scalar_t__>();
      out__.write(beta_star);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(2),
        "assigning variable gamma");
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_star",
        "double",
        std::vector<size_t>{static_cast<size_t>(alpha_star_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "omega_star",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_star",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_star_flat__;
        current_statement__ = 1;
        alpha_star_flat__ = context__.vals_r("alpha_star");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
          stan::model::assign(alpha_star, alpha_star_flat__[(pos__ - 1)],
            "assigning variable alpha_star", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_star);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = context__.vals_r("omega_star")[(1 - 1)];
      out__.write_free_lb(0, omega_star);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = context__.vals_r("beta_star")[(1 - 1)];
      out__.write(beta_star);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(2, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 4;
        gamma_flat__ = context__.vals_r("gamma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_star", "omega_star",
                "beta_star", "gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"lp", "alpha", "omega", "beta"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"y_tilde", "log_lik"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    alpha_star_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(2)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(T)},
             std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
             std::vector<size_t>{}, std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(y_tilde_1dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_star" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_star");
    param_names__.emplace_back(std::string() + "beta_star");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "lp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "omega");
      param_names__.emplace_back(std::string() + "beta");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_star" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_star");
    param_names__.emplace_back(std::string() + "beta_star");
    for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= T; ++sym1__) {
        param_names__.emplace_back(std::string() + "lp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "omega");
      param_names__.emplace_back(std::string() + "beta");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_star\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_star_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omega_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_tilde_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(log_lik_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_star\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_star_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omega_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(T) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_tilde_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(log_lik_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((alpha_star_1dim__ + 1) + 1) + 2);
    const size_t num_transformed = emit_transformed_parameters * ((((T +
      alpha_1dim__) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((y_tilde_1dim__ + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((alpha_star_1dim__ + 1) + 1) + 2);
    const size_t num_transformed = emit_transformed_parameters * ((((T +
      alpha_1dim__) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((y_tilde_1dim__ + log_lik_1dim__));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = traditional_model_namespace::traditional_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return traditional_model_namespace::profiles__;
}
#endif