// Code generated by stanc v2.33.1
#include <stan/model/model_header.hpp>
namespace hmm_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 155> locations_array__ =
  {" (found before start of program)",
  " (in 'hmm.stan', line 22, column 2 to column 27)",
  " (in 'hmm.stan', line 23, column 2 to column 27)",
  " (in 'hmm.stan', line 24, column 2 to column 17)",
  " (in 'hmm.stan', line 25, column 2 to column 18)",
  " (in 'hmm.stan', line 26, column 2 to column 15)",
  " (in 'hmm.stan', line 30, column 2 to column 36)",
  " (in 'hmm.stan', line 31, column 2 to column 24)",
  " (in 'hmm.stan', line 32, column 2 to column 24)",
  " (in 'hmm.stan', line 33, column 2 to column 49)",
  " (in 'hmm.stan', line 34, column 2 to column 40)",
  " (in 'hmm.stan', line 35, column 2 to column 53)",
  " (in 'hmm.stan', line 36, column 2 to column 50)",
  " (in 'hmm.stan', line 93, column 2 to column 50)",
  " (in 'hmm.stan', line 94, column 2 to column 43)",
  " (in 'hmm.stan', line 95, column 2 to column 34)",
  " (in 'hmm.stan', line 96, column 2 to column 39)",
  " (in 'hmm.stan', line 97, column 2 to column 39)",
  " (in 'hmm.stan', line 98, column 2 to column 37)",
  " (in 'hmm.stan', line 99, column 2 to column 20)",
  " (in 'hmm.stan', line 100, column 2 to column 15)",
  " (in 'hmm.stan', line 39, column 11 to column 12)",
  " (in 'hmm.stan', line 39, column 4 to column 17)",
  " (in 'hmm.stan', line 40, column 4 to column 16)",
  " (in 'hmm.stan', line 41, column 11 to column 12)",
  " (in 'hmm.stan', line 41, column 14 to column 15)",
  " (in 'hmm.stan', line 41, column 4 to column 23)",
  " (in 'hmm.stan', line 42, column 4 to column 20)",
  " (in 'hmm.stan', line 43, column 4 to column 21)",
  " (in 'hmm.stan', line 45, column 4 to column 22)",
  " (in 'hmm.stan', line 46, column 4 to column 26)",
  " (in 'hmm.stan', line 47, column 4 to column 21)",
  " (in 'hmm.stan', line 48, column 4 to column 25)",
  " (in 'hmm.stan', line 51, column 6 to column 49)",
  " (in 'hmm.stan', line 52, column 6 to column 57)",
  " (in 'hmm.stan', line 53, column 6 to column 61)",
  " (in 'hmm.stan', line 50, column 15 to line 54, column 5)",
  " (in 'hmm.stan', line 50, column 4 to line 54, column 5)",
  " (in 'hmm.stan', line 66, column 10 to column 77)",
  " (in 'hmm.stan', line 67, column 10 to line 70, column 12)",
  " (in 'hmm.stan', line 65, column 19 to line 71, column 9)",
  " (in 'hmm.stan', line 65, column 6 to line 71, column 9)",
  " (in 'hmm.stan', line 64, column 11 to line 72, column 7)",
  " (in 'hmm.stan', line 61, column 10 to column 77)",
  " (in 'hmm.stan', line 62, column 10 to column 61)",
  " (in 'hmm.stan', line 60, column 19 to line 63, column 9)",
  " (in 'hmm.stan', line 60, column 6 to line 63, column 9)",
  " (in 'hmm.stan', line 59, column 23 to line 64, column 5)",
  " (in 'hmm.stan', line 59, column 11 to line 72, column 7)",
  " (in 'hmm.stan', line 57, column 6 to column 45)",
  " (in 'hmm.stan', line 58, column 6 to column 32)",
  " (in 'hmm.stan', line 56, column 16 to line 59, column 5)",
  " (in 'hmm.stan', line 56, column 4 to line 72, column 7)",
  " (in 'hmm.stan', line 75, column 6 to column 42)",
  " (in 'hmm.stan', line 74, column 35 to line 76, column 5)",
  " (in 'hmm.stan', line 74, column 4 to line 76, column 5)",
  " (in 'hmm.stan', line 38, column 15 to line 77, column 3)",
  " (in 'hmm.stan', line 38, column 2 to line 77, column 3)",
  " (in 'hmm.stan', line 103, column 11 to column 12)",
  " (in 'hmm.stan', line 103, column 14 to column 15)",
  " (in 'hmm.stan', line 103, column 4 to column 23)",
  " (in 'hmm.stan', line 104, column 4 to column 18)",
  " (in 'hmm.stan', line 105, column 4 to column 16)",
  " (in 'hmm.stan', line 108, column 6 to column 22)",
  " (in 'hmm.stan', line 109, column 6 to column 23)",
  " (in 'hmm.stan', line 112, column 8 to column 26)",
  " (in 'hmm.stan', line 113, column 8 to column 30)",
  " (in 'hmm.stan', line 114, column 8 to column 25)",
  " (in 'hmm.stan', line 115, column 8 to column 29)",
  " (in 'hmm.stan', line 119, column 10 to column 35)",
  " (in 'hmm.stan', line 117, column 10 to column 29)",
  " (in 'hmm.stan', line 116, column 8 to line 119, column 35)",
  " (in 'hmm.stan', line 120, column 8 to column 52)",
  " (in 'hmm.stan', line 121, column 8 to column 60)",
  " (in 'hmm.stan', line 122, column 8 to column 64)",
  " (in 'hmm.stan', line 111, column 17 to line 123, column 7)",
  " (in 'hmm.stan', line 111, column 6 to line 123, column 7)",
  " (in 'hmm.stan', line 133, column 12 to column 57)",
  " (in 'hmm.stan', line 134, column 12 to column 91)",
  " (in 'hmm.stan', line 139, column 16 to column 106)",
  " (in 'hmm.stan', line 137, column 16 to column 85)",
  " (in 'hmm.stan', line 136, column 14 to line 139, column 106)",
  " (in 'hmm.stan', line 141, column 16 to column 62)",
  " (in 'hmm.stan', line 140, column 63 to line 142, column 15)",
  " (in 'hmm.stan', line 140, column 14 to line 142, column 15)",
  " (in 'hmm.stan', line 135, column 25 to line 143, column 13)",
  " (in 'hmm.stan', line 135, column 12 to line 143, column 13)",
  " (in 'hmm.stan', line 147, column 14 to column 71)",
  " (in 'hmm.stan', line 145, column 14 to column 89)",
  " (in 'hmm.stan', line 144, column 12 to line 147, column 71)",
  " (in 'hmm.stan', line 148, column 12 to column 99)",
  " (in 'hmm.stan', line 149, column 12 to column 97)",
  " (in 'hmm.stan', line 132, column 23 to line 150, column 11)",
  " (in 'hmm.stan', line 132, column 10 to line 150, column 11)",
  " (in 'hmm.stan', line 131, column 13 to line 151, column 9)",
  " (in 'hmm.stan', line 126, column 8 to column 55)",
  " (in 'hmm.stan', line 127, column 8 to column 41)",
  " (in 'hmm.stan', line 128, column 8 to column 29)",
  " (in 'hmm.stan', line 129, column 8 to column 32)",
  " (in 'hmm.stan', line 130, column 8 to column 40)",
  " (in 'hmm.stan', line 125, column 18 to line 131, column 7)",
  " (in 'hmm.stan', line 125, column 6 to line 151, column 9)",
  " (in 'hmm.stan', line 107, column 27 to line 152, column 7)",
  " (in 'hmm.stan', line 107, column 4 to line 152, column 7)",
  " (in 'hmm.stan', line 102, column 2 to line 153, column 3)",
  " (in 'hmm.stan', line 82, column 4 to column 39)",
  " (in 'hmm.stan', line 81, column 19 to line 83, column 3)",
  " (in 'hmm.stan', line 81, column 2 to line 83, column 3)",
  " (in 'hmm.stan', line 84, column 2 to column 28)",
  " (in 'hmm.stan', line 85, column 2 to column 27)",
  " (in 'hmm.stan', line 86, column 2 to column 23)",
  " (in 'hmm.stan', line 87, column 2 to column 25)",
  " (in 'hmm.stan', line 89, column 12 to column 30)",
  " (in 'hmm.stan', line 89, column 2 to column 30)",
  " (in 'hmm.stan', line 4, column 2 to column 17)",
  " (in 'hmm.stan', line 5, column 2 to column 23)",
  " (in 'hmm.stan', line 6, column 2 to column 17)",
  " (in 'hmm.stan', line 7, column 2 to column 17)",
  " (in 'hmm.stan', line 8, column 2 to column 17)",
  " (in 'hmm.stan', line 9, column 8 to column 19)",
  " (in 'hmm.stan', line 9, column 2 to column 37)",
  " (in 'hmm.stan', line 10, column 8 to column 19)",
  " (in 'hmm.stan', line 10, column 2 to column 37)",
  " (in 'hmm.stan', line 11, column 8 to column 19)",
  " (in 'hmm.stan', line 11, column 2 to column 36)",
  " (in 'hmm.stan', line 12, column 9 to column 20)",
  " (in 'hmm.stan', line 12, column 2 to column 24)",
  " (in 'hmm.stan', line 13, column 2 to column 30)",
  " (in 'hmm.stan', line 14, column 2 to column 25)",
  " (in 'hmm.stan', line 18, column 2 to column 13)",
  " (in 'hmm.stan', line 22, column 9 to column 14)",
  " (in 'hmm.stan', line 25, column 9 to column 10)",
  " (in 'hmm.stan', line 30, column 9 to column 10)",
  " (in 'hmm.stan', line 31, column 9 to column 10)",
  " (in 'hmm.stan', line 31, column 12 to column 13)",
  " (in 'hmm.stan', line 32, column 9 to column 10)",
  " (in 'hmm.stan', line 32, column 12 to column 13)",
  " (in 'hmm.stan', line 33, column 18 to column 23)",
  " (in 'hmm.stan', line 93, column 8 to column 19)",
  " (in 'hmm.stan', line 94, column 8 to column 19)",
  " (in 'hmm.stan', line 95, column 8 to column 19)",
  " (in 'hmm.stan', line 96, column 9 to column 20)",
  " (in 'hmm.stan', line 96, column 22 to column 23)",
  " (in 'hmm.stan', line 97, column 8 to column 19)",
  " (in 'hmm.stan', line 97, column 21 to column 22)",
  " (in 'hmm.stan', line 98, column 8 to column 19)",
  " (in 'hmm.stan', line 98, column 21 to column 22)",
  " (in 'hmm.stan', line 98, column 24 to column 25)",
  " (in 'hmm.stan', line 100, column 9 to column 10)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 3, column 4, included from\n'hmm.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 5, column 8, included from\n'hmm.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 4, column 18, included from\n'hmm.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 4, column 6, included from\n'hmm.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 8, column 4, included from\n'hmm.stan', line 1, column 0)",
  " (in '/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan/functions.stan', line 2, column 33, included from\n'hmm.stan', line 1, column 0)"};
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>>* = nullptr>
int isin(const T0__& i, const T1__& x, std::ostream* pstream__);
// int isin(int, array[] int)
template <typename T0__, typename T1__,
          stan::require_all_t<std::is_integral<T0__>,
                              stan::is_std_vector<T1__>,
                              std::is_integral<stan::value_type_t<T1__>>>*>
int isin(const T0__& i, const T1__& x, std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  // suppress unused var warning
  (void) current_statement__;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 149;
    for (int sym1__ = 1; sym1__ <= stan::math::size(x); ++sym1__) {
      int n;
      current_statement__ = 149;
      n = x[(sym1__ - 1)];
      current_statement__ = 152;
      if (stan::math::logical_eq(n, i)) {
        current_statement__ = 150;
        return 1;
      }
    }
    current_statement__ = 153;
    return 0;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class hmm_model final : public model_base_crtp<hmm_model> {
 private:
  int T;
  int T_prime;
  int N;
  int M;
  int K;
  std::vector<int> ii;
  std::vector<int> jj;
  std::vector<int> B;
  Eigen::Matrix<double,-1,1> y_data__;
  int learn;
  double MAX_PRED;
  int nu;
  int alpha_star_1dim__;
  int alpha_1dim__;
  int z_star_1dim__;
  int y_tilde_1dim__;
  int log_lik_1dim__;
  int lp_pred_steps_1dim__;
  int best_logp_1dim__;
  int logp_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
 public:
  ~hmm_model() {}
  hmm_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "hmm_model_namespace::hmm_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 114;
      context__.validate_dims("data initialization", "T", "int",
        std::vector<size_t>{});
      T = std::numeric_limits<int>::min();
      current_statement__ = 114;
      T = context__.vals_i("T")[(1 - 1)];
      current_statement__ = 114;
      stan::math::check_greater_or_equal(function__, "T", T, 0);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "T_prime", "int",
        std::vector<size_t>{});
      T_prime = std::numeric_limits<int>::min();
      current_statement__ = 115;
      T_prime = context__.vals_i("T_prime")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "T_prime", T_prime, 0);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 116;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 117;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 117;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 117;
      stan::math::check_greater_or_equal(function__, "M", M, 0);
      current_statement__ = 118;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 118;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 118;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 119;
      stan::math::validate_non_negative_index("ii", "T + T_prime", (T +
        T_prime));
      current_statement__ = 120;
      context__.validate_dims("data initialization", "ii", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      ii = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 120;
      ii = context__.vals_i("ii");
      current_statement__ = 120;
      stan::math::check_greater_or_equal(function__, "ii", ii, 1);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("jj", "T + T_prime", (T +
        T_prime));
      current_statement__ = 122;
      context__.validate_dims("data initialization", "jj", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      jj = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 122;
      jj = context__.vals_i("jj");
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "jj", jj, 1);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("B", "T + T_prime", (T +
        T_prime));
      current_statement__ = 124;
      context__.validate_dims("data initialization", "B", "int",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      B = std::vector<int>((T + T_prime), std::numeric_limits<int>::min());
      current_statement__ = 124;
      B = context__.vals_i("B");
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "B", B, 0);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("y", "T + T_prime", (T +
        T_prime));
      current_statement__ = 126;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>((T + T_prime))});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant((T + T_prime),
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), (T +
        T_prime));
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 126;
        y_flat__ = context__.vals_r("y");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (T + T_prime); ++sym1__) {
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 127;
      context__.validate_dims("data initialization", "learn", "int",
        std::vector<size_t>{});
      learn = std::numeric_limits<int>::min();
      current_statement__ = 127;
      learn = context__.vals_i("learn")[(1 - 1)];
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "learn", learn, 0);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "learn", learn, 1);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "MAX_PRED", "double",
        std::vector<size_t>{});
      MAX_PRED = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 128;
      MAX_PRED = context__.vals_r("MAX_PRED")[(1 - 1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "MAX_PRED", MAX_PRED, 0);
      current_statement__ = 129;
      nu = std::numeric_limits<int>::min();
      current_statement__ = 129;
      nu = 0;
      current_statement__ = 130;
      alpha_star_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 130;
      alpha_star_1dim__ = (M - 1);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("alpha_star", "M - 1",
        alpha_star_1dim__);
      current_statement__ = 131;
      stan::math::validate_non_negative_index("gamma", "K", K);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("lp", "N", N);
      current_statement__ = 133;
      stan::math::validate_non_negative_index("lp_steps", "T", T);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("lp_steps", "K", K);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("lp_paths", "T", T);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("lp_paths", "K", K);
      current_statement__ = 137;
      alpha_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 137;
      alpha_1dim__ = (M - 1);
      current_statement__ = 137;
      stan::math::validate_non_negative_index("alpha", "M - 1", alpha_1dim__);
      current_statement__ = 138;
      z_star_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 138;
      z_star_1dim__ = (T + T_prime);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("z_star", "T + T_prime",
        z_star_1dim__);
      current_statement__ = 139;
      y_tilde_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 139;
      y_tilde_1dim__ = (T + T_prime);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("y_tilde", "T + T_prime",
        y_tilde_1dim__);
      current_statement__ = 140;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 140;
      log_lik_1dim__ = (T + T_prime);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("log_lik", "T + T_prime",
        log_lik_1dim__);
      current_statement__ = 141;
      lp_pred_steps_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 141;
      lp_pred_steps_1dim__ = (T + T_prime);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("lp_pred_steps", "T + T_prime",
        lp_pred_steps_1dim__);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("lp_pred_steps", "K", K);
      current_statement__ = 143;
      best_logp_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 143;
      best_logp_1dim__ = (T + T_prime);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("best_logp", "T + T_prime",
        best_logp_1dim__);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("best_logp", "K", K);
      current_statement__ = 145;
      logp_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 145;
      logp_1dim__ = (T + T_prime);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("logp", "T + T_prime",
        logp_1dim__);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("logp", "K", K);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("logp", "K", K);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("mu", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = alpha_star_1dim__ + 1 + 1 + K + 1;
  }
  inline std::string model_name() const final {
    return "hmm_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.33.1",
             "stancflags = --filename-in-msg=hmm.stan --include-paths=/Users/cmgoold/Documents/ledger/data-science-research/data-science-research/hmm-paper/code/stan"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "hmm_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ pi_star = DUMMY_VAR__;
      current_statement__ = 5;
      pi_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> lp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(lp, stan::math::rep_vector(0.0, N),
        "assigning variable lp");
      Eigen::Matrix<local_scalar_t__,-1,-1> lp_steps =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> lp_paths =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      local_scalar_t__ omega = DUMMY_VAR__;
      current_statement__ = 10;
      omega = stan::math::exp(omega_star);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 11;
      beta = stan::math::inv_logit(beta_star);
      local_scalar_t__ pi_ = DUMMY_VAR__;
      current_statement__ = 12;
      pi_ = stan::math::inv_logit(pi_star);
      current_statement__ = 57;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mu", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        local_scalar_t__ sigma2 = DUMMY_VAR__;
        current_statement__ = 24;
        stan::math::validate_non_negative_index("theta", "K", K);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("theta", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,-1> theta =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 27;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 28;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(theta, pi_, "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(1));
        current_statement__ = 30;
        stan::model::assign(theta, (1 - pi_), "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(2));
        current_statement__ = 31;
        stan::model::assign(theta, nu, "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(1));
        current_statement__ = 32;
        stan::model::assign(theta, (1 - nu), "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(2));
        current_statement__ = 37;
        if (stan::math::logical_gt(lag, 1)) {
          current_statement__ = 33;
          stan::model::assign(mu,
            (stan::model::rvalue(alpha_star, "alpha_star",
               stan::model::index_uni((lag - 1))) +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(1));
          current_statement__ = 34;
          stan::model::assign(mu, ((omega_star * stan::math::pow(beta, lag))
            +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(2));
          current_statement__ = 35;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(lag, 1)) {
          current_statement__ = 49;
          stan::model::assign(lp_steps,
            (Eigen::Matrix<double,1,-1>(2) << 0,
                                             stan::math::negative_infinity()).finished(),
            "assigning variable lp_steps", stan::model::index_uni(t));
          current_statement__ = 50;
          stan::model::assign(lp_paths,
            stan::model::rvalue(lp_steps, "lp_steps",
              stan::model::index_uni(t)), "assigning variable lp_paths",
            stan::model::index_uni(t));
        } else {
          current_statement__ = 48;
          if (stan::math::logical_eq(lag, 2)) {
            current_statement__ = 46;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 43;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 44;
              stan::model::assign(lp_paths,
                (stan::math::log(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1), stan::model::index_uni(k))) +
                stan::model::rvalue(lp_steps, "lp_steps",
                  stan::model::index_uni(t), stan::model::index_uni(k))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 41;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 38;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 39;
              stan::model::assign(lp_paths,
                stan::math::log_sum_exp(
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(1)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(1), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k))),
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(2)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(2), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k)))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 55;
        if ((stan::math::primitive_value(stan::math::logical_eq(t, T)) ||
            stan::math::primitive_value(
              stan::math::logical_neq(year,
                stan::model::rvalue(ii, "ii", stan::model::index_uni((t + 1))))))) {
          current_statement__ = 53;
          stan::model::assign(lp,
            stan::math::log_sum_exp(
              stan::model::rvalue(lp_paths, "lp_paths",
                stan::model::index_uni(t))), "assigning variable lp",
            stan::model::index_uni(year));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "pi_", pi_, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "pi_", pi_, 1);
      {
        current_statement__ = 107;
        for (int j = 1; j <= (M - 1); ++j) {
          current_statement__ = 105;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha_star, "alpha_star",
                             stan::model::index_uni(j)), 0, (1.0 / j)));
        }
        current_statement__ = 108;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_star, 0, 1));
        current_statement__ = 109;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_star, 0, 1));
        current_statement__ = 110;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 111;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(pi_star, 0, 1));
        current_statement__ = 113;
        if (learn) {
          current_statement__ = 112;
          lp_accum__.add(stan::math::sum(lp));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ = "hmm_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      local_scalar_t__ pi_star = DUMMY_VAR__;
      current_statement__ = 5;
      pi_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> lp =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(lp, stan::math::rep_vector(0.0, N),
        "assigning variable lp");
      Eigen::Matrix<local_scalar_t__,-1,-1> lp_steps =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> lp_paths =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(T, K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_1dim__,
          DUMMY_VAR__);
      current_statement__ = 9;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      local_scalar_t__ omega = DUMMY_VAR__;
      current_statement__ = 10;
      omega = stan::math::exp(omega_star);
      local_scalar_t__ beta = DUMMY_VAR__;
      current_statement__ = 11;
      beta = stan::math::inv_logit(beta_star);
      local_scalar_t__ pi_ = DUMMY_VAR__;
      current_statement__ = 12;
      pi_ = stan::math::inv_logit(pi_star);
      current_statement__ = 57;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mu", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> mu =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        local_scalar_t__ sigma2 = DUMMY_VAR__;
        current_statement__ = 24;
        stan::math::validate_non_negative_index("theta", "K", K);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("theta", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,-1> theta =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(K, K, DUMMY_VAR__);
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 27;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 28;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(theta, pi_, "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(1));
        current_statement__ = 30;
        stan::model::assign(theta, (1 - pi_), "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(2));
        current_statement__ = 31;
        stan::model::assign(theta, nu, "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(1));
        current_statement__ = 32;
        stan::model::assign(theta, (1 - nu), "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(2));
        current_statement__ = 37;
        if (stan::math::logical_gt(lag, 1)) {
          current_statement__ = 33;
          stan::model::assign(mu,
            (stan::model::rvalue(alpha_star, "alpha_star",
               stan::model::index_uni((lag - 1))) +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(1));
          current_statement__ = 34;
          stan::model::assign(mu, ((omega_star * stan::math::pow(beta, lag))
            +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(2));
          current_statement__ = 35;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(lag, 1)) {
          current_statement__ = 49;
          stan::model::assign(lp_steps,
            (Eigen::Matrix<double,1,-1>(2) << 0,
                                             stan::math::negative_infinity()).finished(),
            "assigning variable lp_steps", stan::model::index_uni(t));
          current_statement__ = 50;
          stan::model::assign(lp_paths,
            stan::model::rvalue(lp_steps, "lp_steps",
              stan::model::index_uni(t)), "assigning variable lp_paths",
            stan::model::index_uni(t));
        } else {
          current_statement__ = 48;
          if (stan::math::logical_eq(lag, 2)) {
            current_statement__ = 46;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 43;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 44;
              stan::model::assign(lp_paths,
                (stan::math::log(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1), stan::model::index_uni(k))) +
                stan::model::rvalue(lp_steps, "lp_steps",
                  stan::model::index_uni(t), stan::model::index_uni(k))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 41;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 38;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 39;
              stan::model::assign(lp_paths,
                stan::math::log_sum_exp(
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(1)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(1), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k))),
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(2)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(2), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k)))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 55;
        if ((stan::math::primitive_value(stan::math::logical_eq(t, T)) ||
            stan::math::primitive_value(
              stan::math::logical_neq(year,
                stan::model::rvalue(ii, "ii", stan::model::index_uni((t + 1))))))) {
          current_statement__ = 53;
          stan::model::assign(lp,
            stan::math::log_sum_exp(
              stan::model::rvalue(lp_paths, "lp_paths",
                stan::model::index_uni(t))), "assigning variable lp",
            stan::model::index_uni(year));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "pi_", pi_, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "pi_", pi_, 1);
      {
        current_statement__ = 107;
        for (int j = 1; j <= (M - 1); ++j) {
          current_statement__ = 105;
          lp_accum__.add(stan::math::normal_lpdf<propto__>(
                           stan::model::rvalue(alpha_star, "alpha_star",
                             stan::model::index_uni(j)), 0, (1.0 / j)));
        }
        current_statement__ = 108;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(omega_star, 0, 1));
        current_statement__ = 109;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(beta_star, 0, 1));
        current_statement__ = 110;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(gamma, 0, 1));
        current_statement__ = 111;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(pi_star, 0, 1));
        current_statement__ = 113;
        if (learn) {
          current_statement__ = 112;
          lp_accum__.add(stan::math::sum(lp));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "hmm_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha_star =
        Eigen::Matrix<double,-1,1>::Constant(alpha_star_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_star = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__);
      double omega_star = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      omega_star = in__.template read_constrain_lb<local_scalar_t__,
                     jacobian__>(0, lp__);
      double beta_star = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      beta_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> gamma =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      gamma = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(K);
      double pi_star = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      pi_star = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> lp =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lp_steps =
        Eigen::Matrix<double,-1,-1>::Constant(T, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lp_paths =
        Eigen::Matrix<double,-1,-1>::Constant(T, K,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(alpha_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      double omega = std::numeric_limits<double>::quiet_NaN();
      double beta = std::numeric_limits<double>::quiet_NaN();
      double pi_ = std::numeric_limits<double>::quiet_NaN();
      out__.write(alpha_star);
      out__.write(omega_star);
      out__.write(beta_star);
      out__.write(gamma);
      out__.write(pi_star);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 6;
      stan::model::assign(lp, stan::math::rep_vector(0.0, N),
        "assigning variable lp");
      current_statement__ = 9;
      stan::model::assign(alpha, stan::math::exp(alpha_star),
        "assigning variable alpha");
      current_statement__ = 10;
      omega = stan::math::exp(omega_star);
      current_statement__ = 11;
      beta = stan::math::inv_logit(beta_star);
      current_statement__ = 12;
      pi_ = stan::math::inv_logit(pi_star);
      current_statement__ = 57;
      for (int t = 1; t <= T; ++t) {
        current_statement__ = 21;
        stan::math::validate_non_negative_index("mu", "K", K);
        Eigen::Matrix<double,-1,1> mu =
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN());
        double sigma2 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 24;
        stan::math::validate_non_negative_index("theta", "K", K);
        current_statement__ = 25;
        stan::math::validate_non_negative_index("theta", "K", K);
        Eigen::Matrix<double,-1,-1> theta =
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN());
        int lag = std::numeric_limits<int>::min();
        current_statement__ = 27;
        lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
        int year = std::numeric_limits<int>::min();
        current_statement__ = 28;
        year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
        current_statement__ = 29;
        stan::model::assign(theta, pi_, "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(1));
        current_statement__ = 30;
        stan::model::assign(theta, (1 - pi_), "assigning variable theta",
          stan::model::index_uni(1), stan::model::index_uni(2));
        current_statement__ = 31;
        stan::model::assign(theta, nu, "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(1));
        current_statement__ = 32;
        stan::model::assign(theta, (1 - nu), "assigning variable theta",
          stan::model::index_uni(2), stan::model::index_uni(2));
        current_statement__ = 37;
        if (stan::math::logical_gt(lag, 1)) {
          current_statement__ = 33;
          stan::model::assign(mu,
            (stan::model::rvalue(alpha_star, "alpha_star",
               stan::model::index_uni((lag - 1))) +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(1));
          current_statement__ = 34;
          stan::model::assign(mu, ((omega_star * stan::math::pow(beta, lag))
            +
            stan::math::log(
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  stan::model::rvalue(B, "B", stan::model::index_uni(t)))))),
            "assigning variable mu", stan::model::index_uni(2));
          current_statement__ = 35;
          sigma2 = stan::math::exp(
                     ((stan::model::rvalue(gamma, "gamma",
                         stan::model::index_uni(1)) +
                     (stan::model::rvalue(gamma, "gamma",
                        stan::model::index_uni(2)) * lag)) +
                     stan::math::log(
                       stan::model::rvalue(y, "y",
                         stan::model::index_uni(
                           stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)))))));
        }
        current_statement__ = 52;
        if (stan::math::logical_eq(lag, 1)) {
          current_statement__ = 49;
          stan::model::assign(lp_steps,
            (Eigen::Matrix<double,1,-1>(2) << 0,
                                             stan::math::negative_infinity()).finished(),
            "assigning variable lp_steps", stan::model::index_uni(t));
          current_statement__ = 50;
          stan::model::assign(lp_paths,
            stan::model::rvalue(lp_steps, "lp_steps",
              stan::model::index_uni(t)), "assigning variable lp_paths",
            stan::model::index_uni(t));
        } else {
          current_statement__ = 48;
          if (stan::math::logical_eq(lag, 2)) {
            current_statement__ = 46;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 43;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 44;
              stan::model::assign(lp_paths,
                (stan::math::log(
                   stan::model::rvalue(theta, "theta",
                     stan::model::index_uni(1), stan::model::index_uni(k))) +
                stan::model::rvalue(lp_steps, "lp_steps",
                  stan::model::index_uni(t), stan::model::index_uni(k))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 41;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 38;
              stan::model::assign(lp_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)), "assigning variable lp_steps",
                stan::model::index_uni(t), stan::model::index_uni(k));
              current_statement__ = 39;
              stan::model::assign(lp_paths,
                stan::math::log_sum_exp(
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(1)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(1), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k))),
                  ((stan::model::rvalue(lp_paths, "lp_paths",
                      stan::model::index_uni((t - 1)),
                      stan::model::index_uni(2)) +
                  stan::math::log(
                    stan::model::rvalue(theta, "theta",
                      stan::model::index_uni(2), stan::model::index_uni(k))))
                  +
                  stan::model::rvalue(lp_steps, "lp_steps",
                    stan::model::index_uni(t), stan::model::index_uni(k)))),
                "assigning variable lp_paths", stan::model::index_uni(t),
                stan::model::index_uni(k));
            }
          }
        }
        current_statement__ = 55;
        if ((stan::math::primitive_value(stan::math::logical_eq(t, T)) ||
            stan::math::primitive_value(
              stan::math::logical_neq(year,
                stan::model::rvalue(ii, "ii", stan::model::index_uni((t + 1))))))) {
          current_statement__ = 53;
          stan::model::assign(lp,
            stan::math::log_sum_exp(
              stan::model::rvalue(lp_paths, "lp_paths",
                stan::model::index_uni(t))), "assigning variable lp",
            stan::model::index_uni(year));
        }
      }
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "omega", omega, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "beta", beta, 0);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "beta", beta, 1);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "pi_", pi_, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "pi_", pi_, 1);
      if (emit_transformed_parameters__) {
        out__.write(lp);
        out__.write(lp_steps);
        out__.write(lp_paths);
        out__.write(alpha);
        out__.write(omega);
        out__.write(beta);
        out__.write(pi_);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<int> z_star =
        std::vector<int>(z_star_1dim__, std::numeric_limits<int>::min());
      std::vector<double> y_tilde =
        std::vector<double>(y_tilde_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> log_lik =
        std::vector<double>(log_lik_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> lp_pred_steps =
        Eigen::Matrix<double,-1,-1>::Constant(lp_pred_steps_1dim__, K,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<double>> best_logp =
        std::vector<std::vector<double>>(best_logp_1dim__,
          std::vector<double>(K, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<std::vector<double>>> logp =
        std::vector<std::vector<std::vector<double>>>(logp_1dim__,
          std::vector<std::vector<double>>(K,
            std::vector<double>(K, std::numeric_limits<double>::quiet_NaN())));
      double log_p_z_star = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> mu =
        Eigen::Matrix<double,-1,1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      {
        current_statement__ = 58;
        stan::math::validate_non_negative_index("theta", "K", K);
        current_statement__ = 59;
        stan::math::validate_non_negative_index("theta", "K", K);
        Eigen::Matrix<double,-1,-1> theta =
          Eigen::Matrix<double,-1,-1>::Constant(K, K,
            std::numeric_limits<double>::quiet_NaN());
        double lagged_y = std::numeric_limits<double>::quiet_NaN();
        double sigma2 = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 103;
        for (int t = 1; t <= (T + T_prime); ++t) {
          int lag = std::numeric_limits<int>::min();
          current_statement__ = 63;
          lag = stan::model::rvalue(jj, "jj", stan::model::index_uni(t));
          int year = std::numeric_limits<int>::min();
          current_statement__ = 64;
          year = stan::model::rvalue(ii, "ii", stan::model::index_uni(t));
          current_statement__ = 76;
          if (stan::math::logical_gt(lag, 1)) {
            current_statement__ = 65;
            stan::model::assign(theta, pi_, "assigning variable theta",
              stan::model::index_uni(1), stan::model::index_uni(1));
            current_statement__ = 66;
            stan::model::assign(theta, (1 - pi_), "assigning variable theta",
              stan::model::index_uni(1), stan::model::index_uni(2));
            current_statement__ = 67;
            stan::model::assign(theta, nu, "assigning variable theta",
              stan::model::index_uni(2), stan::model::index_uni(1));
            current_statement__ = 68;
            stan::model::assign(theta, (1 - nu), "assigning variable theta",
              stan::model::index_uni(2), stan::model::index_uni(2));
            current_statement__ = 71;
            if (isin(stan::model::rvalue(B, "B", stan::model::index_uni(t)),
                  stan::model::rvalue(B, "B",
                    stan::model::index_min_max(1, T)), pstream__)) {
              current_statement__ = 70;
              lagged_y = stan::model::rvalue(y, "y",
                           stan::model::index_uni(
                             stan::model::rvalue(B, "B",
                               stan::model::index_uni(t))));
            } else {
              current_statement__ = 69;
              lagged_y = stan::model::rvalue(y_tilde, "y_tilde",
                           stan::model::index_uni(
                             stan::model::rvalue(B, "B",
                               stan::model::index_uni(t))));
            }
            current_statement__ = 72;
            stan::model::assign(mu,
              (stan::model::rvalue(alpha_star, "alpha_star",
                 stan::model::index_uni((lag - 1))) +
              stan::math::log(lagged_y)), "assigning variable mu",
              stan::model::index_uni(1));
            current_statement__ = 73;
            stan::model::assign(mu, ((omega_star *
              stan::math::pow(beta, lag)) + stan::math::log(lagged_y)),
              "assigning variable mu", stan::model::index_uni(2));
            current_statement__ = 74;
            sigma2 = stan::math::exp(
                       ((stan::model::rvalue(gamma, "gamma",
                           stan::model::index_uni(1)) +
                       (stan::model::rvalue(gamma, "gamma",
                          stan::model::index_uni(2)) * lag)) +
                       stan::math::log(lagged_y)));
          }
          current_statement__ = 101;
          if (stan::math::logical_eq(lag, 1)) {
            current_statement__ = 95;
            stan::model::assign(best_logp,
              std::vector<double>{0, stan::math::negative_infinity()},
              "assigning variable best_logp",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
            current_statement__ = 96;
            stan::model::assign(lp_pred_steps,
              (Eigen::Matrix<double,1,-1>(2) << 0, 0).finished(),
              "assigning variable lp_pred_steps",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
            current_statement__ = 97;
            stan::model::assign(z_star, 1, "assigning variable z_star",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
            current_statement__ = 98;
            stan::model::assign(log_lik, 0.0, "assigning variable log_lik",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
            current_statement__ = 99;
            stan::model::assign(y_tilde,
              stan::model::rvalue(y, "y",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1))), "assigning variable y_tilde",
              stan::model::index_uni(
                (stan::model::rvalue(B, "B", stan::model::index_uni(t)) + 1)));
          } else {
            current_statement__ = 93;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 77;
              stan::model::assign(best_logp, stan::math::negative_infinity(),
                "assigning variable best_logp",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1)), stan::model::index_uni(k));
              current_statement__ = 78;
              stan::model::assign(lp_pred_steps,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu", stan::model::index_uni(k)),
                  stan::math::sqrt(sigma2)),
                "assigning variable lp_pred_steps",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1)), stan::model::index_uni(k));
              current_statement__ = 86;
              for (int j = 1; j <= K; ++j) {
                current_statement__ = 81;
                if (stan::math::logical_eq(lag, 2)) {
                  current_statement__ = 80;
                  stan::model::assign(logp,
                    (stan::math::log(
                       stan::model::rvalue(theta, "theta",
                         stan::model::index_uni(1), stan::model::index_uni(k)))
                    +
                    stan::model::rvalue(lp_pred_steps, "lp_pred_steps",
                      stan::model::index_uni(
                        (stan::model::rvalue(B, "B",
                           stan::model::index_uni(t)) + 1)),
                      stan::model::index_uni(k))), "assigning variable logp",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1)), stan::model::index_uni(j),
                    stan::model::index_uni(k));
                } else {
                  current_statement__ = 79;
                  stan::model::assign(logp,
                    ((stan::model::rvalue(best_logp, "best_logp",
                        stan::model::index_uni(
                          stan::model::rvalue(B, "B",
                            stan::model::index_uni(t))),
                        stan::model::index_uni(j)) +
                    stan::math::log(
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(j), stan::model::index_uni(k))))
                    +
                    stan::model::rvalue(lp_pred_steps, "lp_pred_steps",
                      stan::model::index_uni(
                        (stan::model::rvalue(B, "B",
                           stan::model::index_uni(t)) + 1)),
                      stan::model::index_uni(k))), "assigning variable logp",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1)), stan::model::index_uni(j),
                    stan::model::index_uni(k));
                }
                current_statement__ = 84;
                if (stan::math::logical_gt(
                      stan::model::rvalue(logp, "logp",
                        stan::model::index_uni(
                          (stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)) + 1)),
                        stan::model::index_uni(j), stan::model::index_uni(k)),
                      stan::model::rvalue(best_logp, "best_logp",
                        stan::model::index_uni(
                          (stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)) + 1)),
                        stan::model::index_uni(k)))) {
                  current_statement__ = 82;
                  stan::model::assign(best_logp,
                    stan::model::rvalue(logp, "logp",
                      stan::model::index_uni(
                        (stan::model::rvalue(B, "B",
                           stan::model::index_uni(t)) + 1)),
                      stan::model::index_uni(j), stan::model::index_uni(k)),
                    "assigning variable best_logp",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1)), stan::model::index_uni(k));
                }
              }
              current_statement__ = 89;
              if (stan::math::logical_lte(t, T)) {
                current_statement__ = 88;
                stan::model::assign(z_star,
                  (stan::math::logical_gt(
                     stan::model::rvalue(best_logp, "best_logp",
                       stan::model::index_uni(
                         (stan::model::rvalue(B, "B",
                            stan::model::index_uni(t)) + 1)),
                       stan::model::index_uni(1)),
                     stan::model::rvalue(best_logp, "best_logp",
                       stan::model::index_uni(
                         (stan::model::rvalue(B, "B",
                            stan::model::index_uni(t)) + 1)),
                       stan::model::index_uni(2))) ? 1 : 2),
                  "assigning variable z_star",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1)));
              } else {
                current_statement__ = 87;
                stan::model::assign(z_star,
                  stan::math::categorical_rng(
                    stan::math::transpose(
                      stan::model::rvalue(theta, "theta",
                        stan::model::index_uni(
                          stan::model::rvalue(z_star, "z_star",
                            stan::model::index_uni(
                              stan::model::rvalue(B, "B",
                                stan::model::index_uni(t))))))), base_rng__),
                  "assigning variable z_star",
                  stan::model::index_uni(
                    (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                    1)));
              }
              current_statement__ = 90;
              stan::model::assign(y_tilde,
                stan::math::min(
                  (Eigen::Matrix<double,1,-1>(2) << MAX_PRED,
                                                   stan::math::lognormal_rng(
                                                     stan::model::rvalue(mu,
                                                       "mu",
                                                       stan::model::index_uni(
                                                         stan::model::rvalue(
                                                           z_star, "z_star",
                                                           stan::model::index_uni(
                                                             (stan::model::rvalue(
                                                                B, "B",
                                                                stan::model::index_uni(
                                                                  t)) + 1))))),
                                                     stan::math::sqrt(sigma2),
                                                     base_rng__)).finished()),
                "assigning variable y_tilde",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1)));
              current_statement__ = 91;
              stan::model::assign(log_lik,
                stan::math::lognormal_lpdf<false>(
                  stan::model::rvalue(y, "y",
                    stan::model::index_uni(
                      (stan::model::rvalue(B, "B", stan::model::index_uni(t))
                      + 1))),
                  stan::model::rvalue(mu, "mu",
                    stan::model::index_uni(
                      stan::model::rvalue(z_star, "z_star",
                        stan::model::index_uni(
                          (stan::model::rvalue(B, "B",
                             stan::model::index_uni(t)) + 1))))),
                  stan::math::sqrt(sigma2)), "assigning variable log_lik",
                stan::model::index_uni(
                  (stan::model::rvalue(B, "B", stan::model::index_uni(t)) +
                  1)));
            }
          }
        }
      }
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "z_star", z_star, 1);
      current_statement__ = 13;
      stan::math::check_less_or_equal(function__, "z_star", z_star, K);
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "y_tilde", y_tilde, 0);
      out__.write(z_star);
      out__.write(y_tilde);
      out__.write(log_lik);
      out__.write(lp_pred_steps);
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= best_logp_1dim__; ++sym2__) {
          out__.write(best_logp[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= logp_1dim__; ++sym3__) {
            out__.write(logp[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      out__.write(log_p_z_star);
      out__.write(mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_star,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(alpha_star_1dim__),
        "assigning variable alpha_star");
      out__.write(alpha_star);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, omega_star);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = in__.read<local_scalar_t__>();
      out__.write(beta_star);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(gamma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(K),
        "assigning variable gamma");
      out__.write(gamma);
      local_scalar_t__ pi_star = DUMMY_VAR__;
      current_statement__ = 5;
      pi_star = in__.read<local_scalar_t__>();
      out__.write(pi_star);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_star",
        "double",
        std::vector<size_t>{static_cast<size_t>(alpha_star_1dim__)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "omega_star",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta_star",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "pi_star",
        "double", std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_star =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(alpha_star_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_star_flat__;
        current_statement__ = 1;
        alpha_star_flat__ = context__.vals_r("alpha_star");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
          stan::model::assign(alpha_star, alpha_star_flat__[(pos__ - 1)],
            "assigning variable alpha_star", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(alpha_star);
      local_scalar_t__ omega_star = DUMMY_VAR__;
      current_statement__ = 2;
      omega_star = context__.vals_r("omega_star")[(1 - 1)];
      out__.write_free_lb(0, omega_star);
      local_scalar_t__ beta_star = DUMMY_VAR__;
      current_statement__ = 3;
      beta_star = context__.vals_r("beta_star")[(1 - 1)];
      out__.write(beta_star);
      Eigen::Matrix<local_scalar_t__,-1,1> gamma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 4;
        gamma_flat__ = context__.vals_r("gamma");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write(gamma);
      local_scalar_t__ pi_star = DUMMY_VAR__;
      current_statement__ = 5;
      pi_star = context__.vals_r("pi_star")[(1 - 1)];
      out__.write(pi_star);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_star", "omega_star",
                "beta_star", "gamma", "pi_star"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"lp", "lp_steps", "lp_paths", "alpha", "omega", "beta", "pi_"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"z_star", "y_tilde", "log_lik", "lp_pred_steps", "best_logp",
             "logp", "log_p_z_star", "mu"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    alpha_star_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(T),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(alpha_1dim__)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(z_star_1dim__)},
             std::vector<size_t>{static_cast<size_t>(y_tilde_1dim__)},
             std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)},
             std::vector<size_t>{static_cast<size_t>(lp_pred_steps_1dim__),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(best_logp_1dim__),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(logp_1dim__),
               static_cast<size_t>(K), static_cast<size_t>(K)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_star" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_star");
    param_names__.emplace_back(std::string() + "beta_star");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "pi_star");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "lp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_steps" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_paths" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "omega");
      param_names__.emplace_back(std::string() + "beta");
      param_names__.emplace_back(std::string() + "pi_");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= z_star_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_star" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lp_pred_steps_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_pred_steps" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= best_logp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "best_logp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= logp_1dim__; ++sym3__) {
            param_names__.emplace_back(std::string() + "logp" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      param_names__.emplace_back(std::string() + "log_p_z_star");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= alpha_star_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_star" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "omega_star");
    param_names__.emplace_back(std::string() + "beta_star");
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "gamma" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "pi_star");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "lp" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_steps" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= T; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_paths" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "omega");
      param_names__.emplace_back(std::string() + "beta");
      param_names__.emplace_back(std::string() + "pi_");
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= z_star_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "z_star" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= y_tilde_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_tilde" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= lp_pred_steps_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "lp_pred_steps" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= best_logp_1dim__; ++sym2__) {
          param_names__.emplace_back(std::string() + "best_logp" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= logp_1dim__; ++sym3__) {
            param_names__.emplace_back(std::string() + "logp" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      param_names__.emplace_back(std::string() + "log_p_z_star");
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "mu" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_star\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_star_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omega_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"pi_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lp_steps\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lp_paths\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"pi_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z_star\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_star_1dim__) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_tilde_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(log_lik_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"lp_pred_steps\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lp_pred_steps_1dim__) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"best_logp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(best_logp_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"logp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(logp_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_p_z_star\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_star\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_star_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"omega_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"pi_star\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lp\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lp_steps\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"lp_paths\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(T) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(alpha_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"pi_\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"z_star\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_star_1dim__) + ",\"element_type\":{\"name\":\"int\"}},\"block\":\"generated_quantities\"},{\"name\":\"y_tilde\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(y_tilde_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(log_lik_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"lp_pred_steps\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(lp_pred_steps_1dim__) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"},{\"name\":\"best_logp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(best_logp_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"generated_quantities\"},{\"name\":\"logp\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(logp_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"generated_quantities\"},{\"name\":\"log_p_z_star\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((alpha_star_1dim__ + 1) + 1) + K) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((N +
      (T * K)) + (T * K)) + alpha_1dim__) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((z_star_1dim__ + y_tilde_1dim__) + log_lik_1dim__) +
      (lp_pred_steps_1dim__ * K)) + (best_logp_1dim__ * K)) + (logp_1dim__ *
      (K * K))) + 1) + K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((alpha_star_1dim__ + 1) + 1) + K) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((N +
      (T * K)) + (T * K)) + alpha_1dim__) + 1) + 1) + 1));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((z_star_1dim__ + y_tilde_1dim__) + log_lik_1dim__) +
      (lp_pred_steps_1dim__ * K)) + (best_logp_1dim__ * K)) + (logp_1dim__ *
      (K * K))) + 1) + K));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = hmm_model_namespace::hmm_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return hmm_model_namespace::profiles__;
}
#endif